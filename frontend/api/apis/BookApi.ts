/* tslint:disable */
/* eslint-disable */
/**
 * Book Lib public API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AddBookRequest,
  AddBookResponseData,
  BadRequestResponseData,
  ChangeReadingStatusRequest,
  EditBookRequest,
  GetBookInfoResponseData,
  ListAuthorBooksResponseData,
  ListBookFeedbackResponseData,
  ListBooksByCategoryResponseData,
  ListBooksResponseData,
  ListLibraryBooksResponseData,
  NotFoundResponseData,
  PermissionDeniedResponseData,
  SaveBookFeedbackRequest,
  SaveBookFeedbackResponseData,
  SearchItemsRequest,
  SearchItemsResponseData,
  UnauthorizedResponseData,
} from '../models/index';
import {
    AddBookRequestFromJSON,
    AddBookRequestToJSON,
    AddBookResponseDataFromJSON,
    AddBookResponseDataToJSON,
    BadRequestResponseDataFromJSON,
    BadRequestResponseDataToJSON,
    ChangeReadingStatusRequestFromJSON,
    ChangeReadingStatusRequestToJSON,
    EditBookRequestFromJSON,
    EditBookRequestToJSON,
    GetBookInfoResponseDataFromJSON,
    GetBookInfoResponseDataToJSON,
    ListAuthorBooksResponseDataFromJSON,
    ListAuthorBooksResponseDataToJSON,
    ListBookFeedbackResponseDataFromJSON,
    ListBookFeedbackResponseDataToJSON,
    ListBooksByCategoryResponseDataFromJSON,
    ListBooksByCategoryResponseDataToJSON,
    ListBooksResponseDataFromJSON,
    ListBooksResponseDataToJSON,
    ListLibraryBooksResponseDataFromJSON,
    ListLibraryBooksResponseDataToJSON,
    NotFoundResponseDataFromJSON,
    NotFoundResponseDataToJSON,
    PermissionDeniedResponseDataFromJSON,
    PermissionDeniedResponseDataToJSON,
    SaveBookFeedbackRequestFromJSON,
    SaveBookFeedbackRequestToJSON,
    SaveBookFeedbackResponseDataFromJSON,
    SaveBookFeedbackResponseDataToJSON,
    SearchItemsRequestFromJSON,
    SearchItemsRequestToJSON,
    SearchItemsResponseDataFromJSON,
    SearchItemsResponseDataToJSON,
    UnauthorizedResponseDataFromJSON,
    UnauthorizedResponseDataToJSON,
} from '../models/index';

export interface AddBookOperationRequest {
    addBookRequest: AddBookRequest;
}

export interface AddBookToLibraryRequest {
    bookID: number;
}

export interface ChangeReadingStatusOperationRequest {
    bookID: number;
    changeReadingStatusRequest?: ChangeReadingStatusRequest;
}

export interface DeleteBookRequest {
    bookID: number;
}

export interface EditBookOperationRequest {
    bookID: number;
    editBookRequest?: EditBookRequest;
}

export interface GetBookInfoRequest {
    bookID: number;
}

export interface ListAuthorBooksRequest {
    authorID: number;
}

export interface ListBookFeedbackRequest {
    bookID: number;
}

export interface ListBooksByCategoryRequest {
    categoryID: number;
}

export interface RemoveBookFromLibraryRequest {
    bookID: number;
}

export interface SaveBookFeedbackOperationRequest {
    bookID: number;
    saveBookFeedbackRequest?: SaveBookFeedbackRequest;
}

export interface SearchItemsOperationRequest {
    searchItemsRequest: SearchItemsRequest;
}

/**
 * 
 */
export class BookApi extends runtime.BaseAPI {

    /**
     */
    async addBookRaw(requestParameters: AddBookOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AddBookResponseData>> {
        if (requestParameters['addBookRequest'] == null) {
            throw new runtime.RequiredError(
                'addBookRequest',
                'Required parameter "addBookRequest" was null or undefined when calling addBook().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/book/add`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AddBookRequestToJSON(requestParameters['addBookRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AddBookResponseDataFromJSON(jsonValue));
    }

    /**
     */
    async addBook(requestParameters: AddBookOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AddBookResponseData> {
        const response = await this.addBookRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async addBookToLibraryRaw(requestParameters: AddBookToLibraryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['bookID'] == null) {
            throw new runtime.RequiredError(
                'bookID',
                'Required parameter "bookID" was null or undefined when calling addBookToLibrary().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/book/{bookID}/library/add`.replace(`{${"bookID"}}`, encodeURIComponent(String(requestParameters['bookID']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async addBookToLibrary(requestParameters: AddBookToLibraryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.addBookToLibraryRaw(requestParameters, initOverrides);
    }

    /**
     */
    async changeReadingStatusRaw(requestParameters: ChangeReadingStatusOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['bookID'] == null) {
            throw new runtime.RequiredError(
                'bookID',
                'Required parameter "bookID" was null or undefined when calling changeReadingStatus().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/book/{bookID}/status`.replace(`{${"bookID"}}`, encodeURIComponent(String(requestParameters['bookID']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ChangeReadingStatusRequestToJSON(requestParameters['changeReadingStatusRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async changeReadingStatus(requestParameters: ChangeReadingStatusOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.changeReadingStatusRaw(requestParameters, initOverrides);
    }

    /**
     */
    async deleteBookRaw(requestParameters: DeleteBookRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['bookID'] == null) {
            throw new runtime.RequiredError(
                'bookID',
                'Required parameter "bookID" was null or undefined when calling deleteBook().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/book/{bookID}/delete`.replace(`{${"bookID"}}`, encodeURIComponent(String(requestParameters['bookID']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async deleteBook(requestParameters: DeleteBookRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteBookRaw(requestParameters, initOverrides);
    }

    /**
     */
    async editBookRaw(requestParameters: EditBookOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['bookID'] == null) {
            throw new runtime.RequiredError(
                'bookID',
                'Required parameter "bookID" was null or undefined when calling editBook().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/book/{bookID}/edit`.replace(`{${"bookID"}}`, encodeURIComponent(String(requestParameters['bookID']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EditBookRequestToJSON(requestParameters['editBookRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async editBook(requestParameters: EditBookOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.editBookRaw(requestParameters, initOverrides);
    }

    /**
     */
    async getBookInfoRaw(requestParameters: GetBookInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetBookInfoResponseData>> {
        if (requestParameters['bookID'] == null) {
            throw new runtime.RequiredError(
                'bookID',
                'Required parameter "bookID" was null or undefined when calling getBookInfo().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/book/{bookID}/info`.replace(`{${"bookID"}}`, encodeURIComponent(String(requestParameters['bookID']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetBookInfoResponseDataFromJSON(jsonValue));
    }

    /**
     */
    async getBookInfo(requestParameters: GetBookInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetBookInfoResponseData> {
        const response = await this.getBookInfoRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getLibraryStatsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/book/library/stats`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async getLibraryStats(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.getLibraryStatsRaw(initOverrides);
    }

    /**
     */
    async listAuthorBooksRaw(requestParameters: ListAuthorBooksRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListAuthorBooksResponseData>> {
        if (requestParameters['authorID'] == null) {
            throw new runtime.RequiredError(
                'authorID',
                'Required parameter "authorID" was null or undefined when calling listAuthorBooks().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/book/{authorID}/list`.replace(`{${"authorID"}}`, encodeURIComponent(String(requestParameters['authorID']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListAuthorBooksResponseDataFromJSON(jsonValue));
    }

    /**
     */
    async listAuthorBooks(requestParameters: ListAuthorBooksRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListAuthorBooksResponseData> {
        const response = await this.listAuthorBooksRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async listBookFeedbackRaw(requestParameters: ListBookFeedbackRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListBookFeedbackResponseData>> {
        if (requestParameters['bookID'] == null) {
            throw new runtime.RequiredError(
                'bookID',
                'Required parameter "bookID" was null or undefined when calling listBookFeedback().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/book/{bookID}/feedback/list`.replace(`{${"bookID"}}`, encodeURIComponent(String(requestParameters['bookID']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListBookFeedbackResponseDataFromJSON(jsonValue));
    }

    /**
     */
    async listBookFeedback(requestParameters: ListBookFeedbackRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListBookFeedbackResponseData> {
        const response = await this.listBookFeedbackRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async listBooksRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListBooksResponseData>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/book/list`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListBooksResponseDataFromJSON(jsonValue));
    }

    /**
     */
    async listBooks(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListBooksResponseData> {
        const response = await this.listBooksRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async listBooksByCategoryRaw(requestParameters: ListBooksByCategoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListBooksByCategoryResponseData>> {
        if (requestParameters['categoryID'] == null) {
            throw new runtime.RequiredError(
                'categoryID',
                'Required parameter "categoryID" was null or undefined when calling listBooksByCategory().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/book/{categoryID}/list`.replace(`{${"categoryID"}}`, encodeURIComponent(String(requestParameters['categoryID']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListBooksByCategoryResponseDataFromJSON(jsonValue));
    }

    /**
     */
    async listBooksByCategory(requestParameters: ListBooksByCategoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListBooksByCategoryResponseData> {
        const response = await this.listBooksByCategoryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async listLibraryBooksRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListLibraryBooksResponseData>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/book/library/list`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListLibraryBooksResponseDataFromJSON(jsonValue));
    }

    /**
     */
    async listLibraryBooks(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListLibraryBooksResponseData> {
        const response = await this.listLibraryBooksRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async removeBookFromLibraryRaw(requestParameters: RemoveBookFromLibraryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['bookID'] == null) {
            throw new runtime.RequiredError(
                'bookID',
                'Required parameter "bookID" was null or undefined when calling removeBookFromLibrary().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/book/{bookID}/library/remove`.replace(`{${"bookID"}}`, encodeURIComponent(String(requestParameters['bookID']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async removeBookFromLibrary(requestParameters: RemoveBookFromLibraryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.removeBookFromLibraryRaw(requestParameters, initOverrides);
    }

    /**
     */
    async saveBookFeedbackRaw(requestParameters: SaveBookFeedbackOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SaveBookFeedbackResponseData>> {
        if (requestParameters['bookID'] == null) {
            throw new runtime.RequiredError(
                'bookID',
                'Required parameter "bookID" was null or undefined when calling saveBookFeedback().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/book/{bookID}/feedback`.replace(`{${"bookID"}}`, encodeURIComponent(String(requestParameters['bookID']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SaveBookFeedbackRequestToJSON(requestParameters['saveBookFeedbackRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SaveBookFeedbackResponseDataFromJSON(jsonValue));
    }

    /**
     */
    async saveBookFeedback(requestParameters: SaveBookFeedbackOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SaveBookFeedbackResponseData> {
        const response = await this.saveBookFeedbackRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async searchItemsRaw(requestParameters: SearchItemsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SearchItemsResponseData>> {
        if (requestParameters['searchItemsRequest'] == null) {
            throw new runtime.RequiredError(
                'searchItemsRequest',
                'Required parameter "searchItemsRequest" was null or undefined when calling searchItems().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/item/search`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SearchItemsRequestToJSON(requestParameters['searchItemsRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SearchItemsResponseDataFromJSON(jsonValue));
    }

    /**
     */
    async searchItems(requestParameters: SearchItemsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SearchItemsResponseData> {
        const response = await this.searchItemsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
