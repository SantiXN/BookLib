/* tslint:disable */
/* eslint-disable */
/**
 * Book Lib public API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  BadRequestResponseData,
  CreateArticleRequest,
  CreateArticleResponseData,
  EditArticleRequest,
  GetArticleResponseData,
  ListArticlesResponseData,
  NotFoundResponseData,
  PermissionDeniedResponseData,
  UnauthorizedResponseData,
} from '../models/index';
import {
    BadRequestResponseDataFromJSON,
    BadRequestResponseDataToJSON,
    CreateArticleRequestFromJSON,
    CreateArticleRequestToJSON,
    CreateArticleResponseDataFromJSON,
    CreateArticleResponseDataToJSON,
    EditArticleRequestFromJSON,
    EditArticleRequestToJSON,
    GetArticleResponseDataFromJSON,
    GetArticleResponseDataToJSON,
    ListArticlesResponseDataFromJSON,
    ListArticlesResponseDataToJSON,
    NotFoundResponseDataFromJSON,
    NotFoundResponseDataToJSON,
    PermissionDeniedResponseDataFromJSON,
    PermissionDeniedResponseDataToJSON,
    UnauthorizedResponseDataFromJSON,
    UnauthorizedResponseDataToJSON,
} from '../models/index';

export interface CreateArticleOperationRequest {
    createArticleRequest: CreateArticleRequest;
}

export interface DeleteArticleRequest {
    articleID: number;
}

export interface EditArticleOperationRequest {
    articleID: number;
    editArticleRequest: EditArticleRequest;
}

export interface GetArticleRequest {
    articleID: number;
}

/**
 * 
 */
export class ArticleApi extends runtime.BaseAPI {

    /**
     */
    async createArticleRaw(requestParameters: CreateArticleOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateArticleResponseData>> {
        if (requestParameters['createArticleRequest'] == null) {
            throw new runtime.RequiredError(
                'createArticleRequest',
                'Required parameter "createArticleRequest" was null or undefined when calling createArticle().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/article/create`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateArticleRequestToJSON(requestParameters['createArticleRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateArticleResponseDataFromJSON(jsonValue));
    }

    /**
     */
    async createArticle(requestParameters: CreateArticleOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateArticleResponseData> {
        const response = await this.createArticleRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async deleteArticleRaw(requestParameters: DeleteArticleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['articleID'] == null) {
            throw new runtime.RequiredError(
                'articleID',
                'Required parameter "articleID" was null or undefined when calling deleteArticle().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/article/{articleID}/delete`.replace(`{${"articleID"}}`, encodeURIComponent(String(requestParameters['articleID']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async deleteArticle(requestParameters: DeleteArticleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteArticleRaw(requestParameters, initOverrides);
    }

    /**
     */
    async editArticleRaw(requestParameters: EditArticleOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['articleID'] == null) {
            throw new runtime.RequiredError(
                'articleID',
                'Required parameter "articleID" was null or undefined when calling editArticle().'
            );
        }

        if (requestParameters['editArticleRequest'] == null) {
            throw new runtime.RequiredError(
                'editArticleRequest',
                'Required parameter "editArticleRequest" was null or undefined when calling editArticle().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/article/{articleID}/edit`.replace(`{${"articleID"}}`, encodeURIComponent(String(requestParameters['articleID']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EditArticleRequestToJSON(requestParameters['editArticleRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async editArticle(requestParameters: EditArticleOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.editArticleRaw(requestParameters, initOverrides);
    }

    /**
     */
    async getArticleRaw(requestParameters: GetArticleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetArticleResponseData>> {
        if (requestParameters['articleID'] == null) {
            throw new runtime.RequiredError(
                'articleID',
                'Required parameter "articleID" was null or undefined when calling getArticle().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/article/{articleID}`.replace(`{${"articleID"}}`, encodeURIComponent(String(requestParameters['articleID']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetArticleResponseDataFromJSON(jsonValue));
    }

    /**
     */
    async getArticle(requestParameters: GetArticleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetArticleResponseData> {
        const response = await this.getArticleRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async listArticlesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListArticlesResponseData>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/article/list`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListArticlesResponseDataFromJSON(jsonValue));
    }

    /**
     */
    async listArticles(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListArticlesResponseData> {
        const response = await this.listArticlesRaw(initOverrides);
        return await response.value();
    }

}
