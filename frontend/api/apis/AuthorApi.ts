/* tslint:disable */
/* eslint-disable */
/**
 * Book Lib public API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  BadRequestResponseData,
  CreateAuthorRequest,
  CreateAuthorResponseData,
  GetAuthorInfoResponseData,
  NotFoundResponseData,
  PermissionDeniedResponseData,
  UnauthorizedResponseData,
} from '../models/index';
import {
    BadRequestResponseDataFromJSON,
    BadRequestResponseDataToJSON,
    CreateAuthorRequestFromJSON,
    CreateAuthorRequestToJSON,
    CreateAuthorResponseDataFromJSON,
    CreateAuthorResponseDataToJSON,
    GetAuthorInfoResponseDataFromJSON,
    GetAuthorInfoResponseDataToJSON,
    NotFoundResponseDataFromJSON,
    NotFoundResponseDataToJSON,
    PermissionDeniedResponseDataFromJSON,
    PermissionDeniedResponseDataToJSON,
    UnauthorizedResponseDataFromJSON,
    UnauthorizedResponseDataToJSON,
} from '../models/index';

export interface CreateAuthorOperationRequest {
    createAuthorRequest?: CreateAuthorRequest;
}

export interface GetAuthorInfoRequest {
    authorID: number;
}

/**
 * 
 */
export class AuthorApi extends runtime.BaseAPI {

    /**
     */
    async createAuthorRaw(requestParameters: CreateAuthorOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateAuthorResponseData>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/author/create`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateAuthorRequestToJSON(requestParameters['createAuthorRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateAuthorResponseDataFromJSON(jsonValue));
    }

    /**
     */
    async createAuthor(requestParameters: CreateAuthorOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateAuthorResponseData> {
        const response = await this.createAuthorRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getAuthorInfoRaw(requestParameters: GetAuthorInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetAuthorInfoResponseData>> {
        if (requestParameters['authorID'] == null) {
            throw new runtime.RequiredError(
                'authorID',
                'Required parameter "authorID" was null or undefined when calling getAuthorInfo().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/author/{authorID}/info`.replace(`{${"authorID"}}`, encodeURIComponent(String(requestParameters['authorID']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetAuthorInfoResponseDataFromJSON(jsonValue));
    }

    /**
     */
    async getAuthorInfo(requestParameters: GetAuthorInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetAuthorInfoResponseData> {
        const response = await this.getAuthorInfoRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
