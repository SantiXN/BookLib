/* tslint:disable */
/* eslint-disable */
/**
 * Book Lib public API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  BadRequestResponseData,
  GetFileResponseData,
  NotFoundResponseData,
  PermissionDeniedResponseData,
  UnauthorizedResponseData,
  UploadFileResponseData,
} from '../models/index';
import {
    BadRequestResponseDataFromJSON,
    BadRequestResponseDataToJSON,
    GetFileResponseDataFromJSON,
    GetFileResponseDataToJSON,
    NotFoundResponseDataFromJSON,
    NotFoundResponseDataToJSON,
    PermissionDeniedResponseDataFromJSON,
    PermissionDeniedResponseDataToJSON,
    UnauthorizedResponseDataFromJSON,
    UnauthorizedResponseDataToJSON,
    UploadFileResponseDataFromJSON,
    UploadFileResponseDataToJSON,
} from '../models/index';

export interface GetFileRequest {
    filePath: string;
}

export interface UploadFileRequest {
    file?: Blob;
}

/**
 * 
 */
export class FileApi extends runtime.BaseAPI {

    /**
     */
    async getFileRaw(requestParameters: GetFileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetFileResponseData>> {
        if (requestParameters['filePath'] == null) {
            throw new runtime.RequiredError(
                'filePath',
                'Required parameter "filePath" was null or undefined when calling getFile().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/file/{filePath}`.replace(`{${"filePath"}}`, encodeURIComponent(String(requestParameters['filePath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetFileResponseDataFromJSON(jsonValue));
    }

    /**
     */
    async getFile(requestParameters: GetFileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetFileResponseData> {
        const response = await this.getFileRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async uploadFileRaw(requestParameters: UploadFileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UploadFileResponseData>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters['file'] != null) {
            formParams.append('file', requestParameters['file'] as any);
        }

        const response = await this.request({
            path: `/api/file/upload`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UploadFileResponseDataFromJSON(jsonValue));
    }

    /**
     */
    async uploadFile(requestParameters: UploadFileRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UploadFileResponseData> {
        const response = await this.uploadFileRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
