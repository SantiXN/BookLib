/* tslint:disable */
/* eslint-disable */
/**
 * Book Lib public API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  BadRequestResponseData,
  CreateAuthorRequest,
  CreateAuthorResponseData,
  EditAuthorRequest,
  GetAuthorInfoResponseData,
  ListAuthorsResponseData,
  NotFoundResponseData,
  PermissionDeniedResponseData,
  SearchAuthorsRequest,
  SearchAuthorsResponseData,
  UnauthorizedResponseData,
} from '../models/index';
import {
    BadRequestResponseDataFromJSON,
    BadRequestResponseDataToJSON,
    CreateAuthorRequestFromJSON,
    CreateAuthorRequestToJSON,
    CreateAuthorResponseDataFromJSON,
    CreateAuthorResponseDataToJSON,
    EditAuthorRequestFromJSON,
    EditAuthorRequestToJSON,
    GetAuthorInfoResponseDataFromJSON,
    GetAuthorInfoResponseDataToJSON,
    ListAuthorsResponseDataFromJSON,
    ListAuthorsResponseDataToJSON,
    NotFoundResponseDataFromJSON,
    NotFoundResponseDataToJSON,
    PermissionDeniedResponseDataFromJSON,
    PermissionDeniedResponseDataToJSON,
    SearchAuthorsRequestFromJSON,
    SearchAuthorsRequestToJSON,
    SearchAuthorsResponseDataFromJSON,
    SearchAuthorsResponseDataToJSON,
    UnauthorizedResponseDataFromJSON,
    UnauthorizedResponseDataToJSON,
} from '../models/index';

export interface CreateAuthorOperationRequest {
    createAuthorRequest?: CreateAuthorRequest;
}

export interface DeleteAuthorRequest {
    authorID: number;
}

export interface EditAuthorOperationRequest {
    authorID: number;
    editAuthorRequest?: EditAuthorRequest;
}

export interface GetAuthorInfoRequest {
    authorID: number;
}

export interface SearchAuthorsOperationRequest {
    searchAuthorsRequest: SearchAuthorsRequest;
    page?: number;
    limit?: number;
}

/**
 * 
 */
export class AuthorApi extends runtime.BaseAPI {

    /**
     */
    async createAuthorRaw(requestParameters: CreateAuthorOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateAuthorResponseData>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/author/create`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateAuthorRequestToJSON(requestParameters['createAuthorRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateAuthorResponseDataFromJSON(jsonValue));
    }

    /**
     */
    async createAuthor(requestParameters: CreateAuthorOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateAuthorResponseData> {
        const response = await this.createAuthorRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async deleteAuthorRaw(requestParameters: DeleteAuthorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['authorID'] == null) {
            throw new runtime.RequiredError(
                'authorID',
                'Required parameter "authorID" was null or undefined when calling deleteAuthor().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/author/{authorID}/delete`.replace(`{${"authorID"}}`, encodeURIComponent(String(requestParameters['authorID']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async deleteAuthor(requestParameters: DeleteAuthorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteAuthorRaw(requestParameters, initOverrides);
    }

    /**
     */
    async editAuthorRaw(requestParameters: EditAuthorOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['authorID'] == null) {
            throw new runtime.RequiredError(
                'authorID',
                'Required parameter "authorID" was null or undefined when calling editAuthor().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/author/{authorID}/edit`.replace(`{${"authorID"}}`, encodeURIComponent(String(requestParameters['authorID']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EditAuthorRequestToJSON(requestParameters['editAuthorRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async editAuthor(requestParameters: EditAuthorOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.editAuthorRaw(requestParameters, initOverrides);
    }

    /**
     */
    async getAuthorInfoRaw(requestParameters: GetAuthorInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetAuthorInfoResponseData>> {
        if (requestParameters['authorID'] == null) {
            throw new runtime.RequiredError(
                'authorID',
                'Required parameter "authorID" was null or undefined when calling getAuthorInfo().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/author/{authorID}/info`.replace(`{${"authorID"}}`, encodeURIComponent(String(requestParameters['authorID']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetAuthorInfoResponseDataFromJSON(jsonValue));
    }

    /**
     */
    async getAuthorInfo(requestParameters: GetAuthorInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetAuthorInfoResponseData> {
        const response = await this.getAuthorInfoRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async listAuthorsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListAuthorsResponseData>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/author/list`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListAuthorsResponseDataFromJSON(jsonValue));
    }

    /**
     */
    async listAuthors(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListAuthorsResponseData> {
        const response = await this.listAuthorsRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async searchAuthorsRaw(requestParameters: SearchAuthorsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SearchAuthorsResponseData>> {
        if (requestParameters['searchAuthorsRequest'] == null) {
            throw new runtime.RequiredError(
                'searchAuthorsRequest',
                'Required parameter "searchAuthorsRequest" was null or undefined when calling searchAuthors().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/author/search`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SearchAuthorsRequestToJSON(requestParameters['searchAuthorsRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SearchAuthorsResponseDataFromJSON(jsonValue));
    }

    /**
     */
    async searchAuthors(requestParameters: SearchAuthorsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SearchAuthorsResponseData> {
        const response = await this.searchAuthorsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
