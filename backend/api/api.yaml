openapi: 3.1.0
info:
  version: 1.0.0
  title: Book Lib public API
security:
  - bearerAuth: [ ]
paths:
  # Добавить книгу в общую библиотеку
  /api/book/add:
    post:
      tags:
        - book
      operationId: AddBook
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddBookRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AddBookResponseData'
        '400':
          $ref: '#/components/responses/badRequest'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/permissionDenied'

#TODO добавление категорий и авторов
  /api/book/{bookID}/delete:
    post:
      tags:
        - book
      operationId: DeleteBook
      parameters:
        - in: path
          name: bookID
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: OK
        '400':
          $ref: '#/components/responses/badRequest'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/permissionDenied'
        '404':
          $ref: '#/components/responses/notFound'

  /api/book/{bookID}/info:
    get:
      tags:
        - book
      operationId: GetBookInfo
      parameters:
        - in: path
          name: bookID
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetBookInfoResponseData'
        '400':
          $ref: '#/components/responses/badRequest'
        '401':
          $ref: '#/components/responses/unauthorized'
        '404':
          $ref: '#/components/responses/notFound'

  /api/book/list:
    get:
      tags:
        - book
      operationId: ListBooks
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListBooksResponseData'
        '400':
          $ref: '#/components/responses/badRequest'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/permissionDenied'

# Добавить книгу в собственную библиотеку
# TODO подумать над названием
  /api/book/{bookID}/library/add:
    post:
      tags:
        - book
      operationId: AddBookToLibrary
      parameters:
        - in: path
          name: bookID
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: OK
        '400':
          $ref: '#/components/responses/badRequest'
        '401':
          $ref: '#/components/responses/unauthorized'
        '404':
          $ref: '#/components/responses/notFound'

  /api/book/search:
    post:
      tags:
        - book
      operationId: SearchBooks
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SearchBooksRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SearchBooksResponseData'
        '400':
          $ref: '#/components/responses/badRequest'
        '401':
          $ref: '#/components/responses/unauthorized'

# TODO: Можно вынести в отдельный запрос для получения книг из собств библиотеки. Добавить параметр - userId, чтобы можно было получить книги из собственной библиотеки, добавить фильтры

# TODO: Получение по категории, автору. Обсудить
  /api/book/search/option:
    post:
      tags:
        - book
      operationId: SearchBooksByOption
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SearchBooksByOptionRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SearchBooksByOptionResponseData'
        '400':
          $ref: '#/components/responses/badRequest'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/permissionDenied'


  /api/book/{bookID}/status:
    post:
      tags:
        - book
      operationId: ChangeReadingStatus
      parameters:
        - in: path
          name: bookID
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangeReadingStatusRequest'
      responses:
        '200':
          description: OK
        '400':
          $ref: '#/components/responses/badRequest'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/permissionDenied'
        '404':
          $ref: '#/components/responses/notFound'


  /api/book/{bookID}/feedback:
    post:
      tags:
        - book
      operationId: SaveBookFeedback
      parameters:
        - in: path
          name: bookID
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SaveBookFeedbackRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SaveBookFeedbackResponseData'
        '400':
          $ref: '#/components/responses/badRequest'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/permissionDenied'
        '404':
          $ref: '#/components/responses/notFound'

  /api/book/{bookID}/feedback/list:
    get:
      tags:
        - book
      operationId: ListBookFeedback
      parameters:
        - in: path
          name: bookID
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListBookFeedbackResponseData'
        '400':
          $ref: '#/components/responses/badRequest'
        '401':
          $ref: '#/components/responses/unauthorized'
        '404':
          $ref: '#/components/responses/notFound'


  #TODO Получить статистику по книгам в библиотеке (Н: сколько книг прочитал)
  /api/book/library/stats:
    get:
      tags:
        - book
      operationId: GetLibraryStats
      responses:
        '200':
          description: OK
        '400':
          $ref: '#/components/responses/badRequest'
        '401':
          $ref: '#/components/responses/unauthorized'


components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  responses:
    notFound:
      description: Not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/notFoundResponseData'
    permissionDenied:
      description: Permission denied
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/permissionDeniedResponseData'
    unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/unauthorizedResponseData'
    badRequest:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/badRequestResponseData'
  schemas:
    notFoundResponseData:
      type: object
      properties:
        code:
          type: string
          enum:
            - NotFound
        message:
          type: string
      required:
        - code
        - message
    permissionDeniedResponseData:
      type: object
      properties:
        code:
          type: string
          enum:
            - PermissionDenied
        message:
          type: string
      required:
        - code
        - message
    unauthorizedResponseData:
      type: object
      properties:
        code:
          type: string
          enum:
            - Unauthorized
        message:
          type: string
      required:
        - code
        - message
    badRequestResponseData:
      type: object
      properties:
        code:
          type: string
          enum:
            - BadRequest
        message:
          type: string
      required:
        - code
        - message

    AddBookRequest:
      type: object
      properties:
        title:
          type: string
        description:
          type: string
        authorIDs:
          type: array
          items:
            type: integer
        categoryIDs:
          type: array
          items:
            type: integer
      required:
        - title
        - authorIDs
        - categoryIDs
    AddBookResponseData:
      type: object
      properties:
        id:
          type: integer
    GetBookInfoResponseData:
      type: object
      properties:
        book:
          $ref: '#/components/schemas/bookInfo'
    ListBooksResponseData:
      type: object
      properties:
        books:
          type: array
          items:
            $ref: '#/components/schemas/bookData'
    SearchBooksRequest:
      type: object
      properties:
        searchString:
          type: string
      required:
        - searchString
    SearchBooksResponseData:
      type: object
      properties:
        books:
          type: array
          items:
            $ref: '#/components/schemas/bookData'
    SearchBooksByOptionRequest:
      type: object
      properties:

    SearchBooksByOptionResponseData:
      type: object
      properties:
        books:
          type: array
          items:
            $ref: '#/components/schemas/bookData'
    ChangeReadingStatusRequest:
      type: object
      properties:
        readingStatus:
          type: string
          enum:
            - inProgress
            - finished
            - planned
      required:
        - readingStatus
    SaveBookFeedbackRequest:
      type: object
      properties:
        starCount:
          type: integer
        comment:
          type: string
      required:
        - starCount
    SaveBookFeedbackResponseData:
      type: object
      properties:
        id:
          type: integer
    ListBookFeedbackResponseData:
      type: object
      properties:
        books:
          type: array
          items:
            $ref: '#/components/schemas/feedbackInfo'

    bookData:
      type: object
      properties:
        id:
          type: integer
        title:
          type: string
        coverPath:
          type: string
        authors:
          type: array
          items:
            $ref: '#/components/schemas/authorInfo'
        starCount:
          type: number
      required:
        - id
        - title
        - coverPath
        - authors
        - feedback
        - starCount

    bookInfo:
      type: object
      properties:
        id:
          type: integer
        title:
          type: string
        description:
          type: string
        coverPath:
          type: string
        authors:
          type: array
          items:
            $ref: '#/components/schemas/authorInfo'
        starCount:
          type: number
        feedback:
          type: array
          items:
            $ref: '#/components/schemas/feedbackInfo'
        categories:
          type: array
          items:
            $ref: '#/components/schemas/categoryInfo'
      required:
        - id
        - title
        - description
        - coverPath
        - authors
        - starCount
        - categories

    authorInfo:
      type: object
      properties:
        id:
          type: integer
        firstName:
          type: string
        lastName:
          type: string
      required:
        - id
        - firstName

    categoryInfo:
      type: object
      properties:
        id:
          type: integer
        category:
          type: string
      required:
        - id
        - category

#TODO подумать над возвращением данных о пользователе
    feedbackInfo:
      type: object
      properties:
        id:
          type: integer
        userID:
          type: integer
        starCount:
          type: integer
        comment:
          type: string
        postedAt:
          type: integer
          format: integer64
          description: unix timestamp
      required:
        - id
        - userID
        - starCount
        - postedAt
