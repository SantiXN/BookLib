openapi: 3.1.0
info:
  version: 1.0.0
  title: Book Lib public API
security:
  - bearerAuth: [ ]
paths:
  /api/book/add:
    post:
      tags:
        - book
      operationId: AddBook
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddBookRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AddBookResponseData'
        '400':
          $ref: '#/components/responses/badRequest'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/permissionDenied'

  /api/book/{bookID}/delete:
    post:
      tags:
        - book
      operationId: DeleteBook
      parameters:
        - in: path
          name: bookID
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: OK
        '400':
          $ref: '#/components/responses/badRequest'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/permissionDenied'
        '404':
          $ref: '#/components/responses/notFound'

  /api/book/{bookID}/info:
    get:
      tags:
        - book
      operationId: GetBookInfo
      parameters:
        - in: path
          name: bookID
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetBookInfoResponseData'
        '400':
          $ref: '#/components/responses/badRequest'
        '401':
          $ref: '#/components/responses/unauthorized'
        '404':
          $ref: '#/components/responses/notFound'

  /api/author/{authorID}/info:
    get:
      tags:
        - author
      operationId: GetAuthorInfo
      parameters:
        - in: path
          name: authorID
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAuthorInfoResponseData'
        '400':
          $ref: '#/components/responses/badRequest'
        '401':
          $ref: '#/components/responses/unauthorized'
        '404':
          $ref: '#/components/responses/notFound'

  /api/book/author/{authorID}/list:
    get:
      tags:
        - book
      operationId: ListAuthorBooks
      parameters:
        - in: path
          name: authorID
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListAuthorBooksResponseData'
        '400':
          $ref: '#/components/responses/badRequest'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/permissionDenied'
        '404':
          $ref: '#/components/responses/notFound'

  /api/book/{bookID}/library/add:
    post:
      tags:
        - book
      operationId: AddBookToLibrary
      parameters:
        - in: path
          name: bookID
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: OK
        '400':
          $ref: '#/components/responses/badRequest'
        '401':
          $ref: '#/components/responses/unauthorized'
        '404':
          $ref: '#/components/responses/notFound'
  
  /api/book/{bookID}/library/contains:
    get:
      tags:
        - book
      operationId: CheckBookInLibrary
      parameters:
        - in: path
          name: bookID
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CheckBookInLibraryResponseData'
        '400':
          $ref: '#/components/responses/badRequest'
        '401':
          $ref: '#/components/responses/unauthorized'
        '404':
          $ref: '#/components/responses/notFound'

  /api/book/{bookID}/library/remove:
    post:
      tags:
        - book
      operationId: RemoveBookFromLibrary
      parameters:
        - in: path
          name: bookID
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: OK
        '400':
          $ref: '#/components/responses/badRequest'
        '401':
          $ref: '#/components/responses/unauthorized'
        '404':
          $ref: '#/components/responses/notFound'

  /api/book/search:
    post:
      tags:
        - book
      operationId: SearchBooks
      parameters:
        - name: page
          in: query
          required: false
          schema:
            type: integer
            minimum: 1
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            minimum: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SearchBooksRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SearchBooksResponseData'
        '400':
          $ref: '#/components/responses/badRequest'
        '401':
          $ref: '#/components/responses/unauthorized'


  /api/author/search:
    post:
      tags:
        - author
      operationId: SearchAuthors
      parameters:
        - name: page
          in: query
          required: false
          schema:
            type: integer
            minimum: 1
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            minimum: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SearchAuthorsRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SearchAuthorsResponseData'
        '400':
          $ref: '#/components/responses/badRequest'
        '401':
          $ref: '#/components/responses/unauthorized'

  /api/article/search:
    post:
      tags:
        - article
      operationId: SearchArticles
      parameters:
        - name: page
          in: query
          required: false
          schema:
            type: integer
            minimum: 1
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            minimum: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SearchArticlesRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SearchArticlesResponseData'
        '400':
          $ref: '#/components/responses/badRequest'
        '401':
          $ref: '#/components/responses/unauthorized'

  /api/book/category/{categoryID}/list:
    get:
      tags:
        - book
      operationId: ListBooksByCategory
      parameters:
        - in: path
          name: categoryID
          required: true
          schema:
            type: integer
        - name: page
          in: query
          required: false
          schema:
            type: integer
            minimum: 1
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            minimum: 1
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListBooksByCategoryResponseData'
        '400':
          $ref: '#/components/responses/badRequest'
        '401':
          $ref: '#/components/responses/unauthorized'

  /api/library/status/list:
    post:
      tags:
        - book
      operationId: ListLibraryBooksByStatus
      parameters:
        - name: page
          in: query
          required: false
          schema:
            type: integer
            minimum: 1
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            minimum: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListLibraryBooksByStatusRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListLibraryBooksByStatusResponseData'
        '400':
          $ref: '#/components/responses/badRequest'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/permissionDenied'


  /api/book/{bookID}/status:
    post:
      tags:
        - book
      operationId: ChangeReadingStatus
      parameters:
        - in: path
          name: bookID
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangeReadingStatusRequest'
      responses:
        '200':
          description: OK
        '400':
          $ref: '#/components/responses/badRequest'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/permissionDenied'
        '404':
          $ref: '#/components/responses/notFound'


  /api/book/{bookID}/feedback:
    post:
      tags:
        - book
      operationId: SaveBookFeedback
      parameters:
        - in: path
          name: bookID
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SaveBookFeedbackRequest'
      responses:
        '200':
          description: OK
        '400':
          $ref: '#/components/responses/badRequest'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/permissionDenied'
        '404':
          $ref: '#/components/responses/notFound'

  /api/book/{bookID}/feedback/list:
    get:
      tags:
        - book
      operationId: ListBookFeedback
      parameters:
        - in: path
          name: bookID
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListBookFeedbackResponseData'
        '400':
          $ref: '#/components/responses/badRequest'
        '401':
          $ref: '#/components/responses/unauthorized'
        '404':
          $ref: '#/components/responses/notFound'

  /api/book/{bookID}/edit:
    post:
      tags:
        - book
      operationId: EditBook
      parameters:
        - in: path
          name: bookID
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EditBookRequest'
      responses:
        '200':
          description: OK
        '400':
          $ref: '#/components/responses/badRequest'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/permissionDenied'
        '404':
          $ref: '#/components/responses/notFound'

  /api/category/list:
    get:
      tags:
        - category
      operationId: ListCategories
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListCategoriesResponseData'
        '401':
          $ref: '#/components/responses/unauthorized'

  /api/author/create:
    post:
      tags:
        - author
      operationId: CreateAuthor
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAuthorRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateAuthorResponseData'
        '400':
          $ref: '#/components/responses/badRequest'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/permissionDenied'

  /api/author/{authorID}/delete:
    post:
      tags:
        - author
      operationId: DeleteAuthor
      parameters:
        - in: path
          name: authorID
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: OK
        '400':
          $ref: '#/components/responses/badRequest'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/permissionDenied'
        '404':
          $ref: '#/components/responses/notFound'

  /api/author/{authorID}/edit:
    post:
      tags:
        - author
      operationId: EditAuthor
      parameters:
        - in: path
          name: authorID
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EditAuthorRequest'
      responses:
        '200':
          description: OK
        '400':
          $ref: '#/components/responses/badRequest'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/permissionDenied'
        '404':
          $ref: '#/components/responses/notFound'
  
  /api/author/list:
    post:
      tags:
        - author
      operationId: ListAuthors
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListAuthorsResponseData'
        '400':
          $ref: '#/components/responses/badRequest'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/permissionDenied'

  /api/login:
    post:
      security: []
      tags:
        - user
      operationId: LoginUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginUserRequest'
      responses:
          '200':
            description: OK
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/LoginUserResponseData'
          '400':
            $ref: '#/components/responses/badRequest'

  /api/register:
    post:
      tags:
        - user
      operationId: RegisterUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterUserRequest'
      responses:
        '200':
          description: OK
        '400':
          $ref: '#/components/responses/badRequest'

  /api/user/get:
    get:
      tags:
        - user
      operationId: GetAuthorizedUser
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAuthorizedUserResponseData'
        '401':
          $ref: '#/components/responses/unauthorized'

  /api/user/list:
    post:
      tags:
        - user
      operationId: ListUsers
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListUsersResponseData'
        '400':
          $ref: '#/components/responses/badRequest'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/permissionDenied'

  /api/user/{userID}:
    post:
      tags:
        - user
      operationId: GetUserInfo
      parameters:
        - in: path
          name: userID
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetUserInfoResponseData'
        '400':
          $ref: '#/components/responses/badRequest'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/permissionDenied'
        '404':
          $ref: '#/components/responses/notFound'

  /api/user/{userID}/role:
    post:
      tags:
        - user
      operationId: ChangeUserRole
      parameters:
        - in: path
          name: userID
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangeUserRoleRequest'
      responses:
        '200':
          description: OK
        '400':
          $ref: '#/components/responses/badRequest'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/permissionDenied'
        '404':
          $ref: '#/components/responses/notFound'

  /api/user/edit:
    post:
      tags:
        - user
      operationId: EditUserInfo
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EditUserInfoRequest'
      responses:
        '200':
          description: OK
        '400':
          $ref: '#/components/responses/badRequest'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/permissionDenied'
        '404':
          $ref: '#/components/responses/notFound'

  /api/user/{userID}/delete:
    post:
      tags:
        - user
      operationId: DeleteUser
      parameters:
        - in: path
          name: userID
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: OK
        '400':
          $ref: '#/components/responses/badRequest'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/permissionDenied'
        '404':
          $ref: '#/components/responses/notFound'

  /api/user/{userID}/data:
    get:
      tags:
        - user
      operationId: GetUserData
      parameters:
        - in: path
          name: userID
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetUserDataResponseData'
        '400':
          $ref: '#/components/responses/badRequest'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/permissionDenied'
        '404':
          $ref: '#/components/responses/notFound'

  /api/article/create:
    post:
      tags:
        - article
      operationId: CreateArticle
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateArticleRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateArticleResponseData'
        '400':
          $ref: '#/components/responses/badRequest'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/permissionDenied'

  /api/article/{articleID}/publish:
    post:
      tags:
        - article
      operationId: PublishArticle
      parameters:
        - in: path
          name: articleID
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: OK
        '400':
          $ref: '#/components/responses/badRequest'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/permissionDenied'
        '404':
          $ref: '#/components/responses/notFound'

  /api/article/{articleID}/delete:
    post:
      tags:
        - article
      operationId: DeleteArticle
      parameters:
        - in: path
          name: articleID
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: OK
        '400':
          $ref: '#/components/responses/badRequest'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/permissionDenied'
        '404':
          $ref: '#/components/responses/notFound'

  /api/article/{articleID}/edit:
    post:
      tags:
        - article
      operationId: EditArticle
      parameters:
        - in: path
          name: articleID
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EditArticleRequest'
      responses:
        '200':
          description: OK
        '400':
          $ref: '#/components/responses/badRequest'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/permissionDenied'
        '404':
          $ref: '#/components/responses/notFound'

  /api/article/{articleID}:
    get:
      tags:
        - article
      operationId: GetArticle
      parameters:
        - in: path
          name: articleID
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetArticleResponseData'
        '400':
          $ref: '#/components/responses/badRequest'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/permissionDenied'
        '404':
          $ref: '#/components/responses/notFound'

  /api/article/list:
    get:
      tags:
        - article
      operationId: ListArticles
      parameters:
        - name: page
          in: query
          required: false
          schema:
            type: integer
            minimum: 1
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            minimum: 1
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListArticlesResponseData'
        '400':
          $ref: '#/components/responses/badRequest'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/permissionDenied'

  /api/article/management:
    get:
      tags:
        - article
      operationId: ManagementArticles
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ManagementArticlesResponseData'
        '400':
          $ref: '#/components/responses/badRequest'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/permissionDenied'

  /api/file/upload:
    post:
      tags:
        - file
      operationId: UploadFile
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UploadFileResponseData'
        '400':
          $ref: '#/components/responses/badRequest'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/permissionDenied'
        '404':
          $ref: '#/components/responses/notFound'

  /api/file/{filePath}:
    get:
      tags:
        - file
      operationId: GetFile
      parameters:
        - name: filePath
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/octet-stream: # MIME-тип для бинарных данных
              schema:
                $ref: '#/components/schemas/GetFileResponseData'
        '400':
          $ref: '#/components/responses/badRequest'
        '401':
          $ref: '#/components/responses/unauthorized'
        '404':
          $ref: '#/components/responses/notFound'


components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  responses:
    notFound:
      description: Not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/notFoundResponseData'
    permissionDenied:
      description: Permission denied
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/permissionDeniedResponseData'
    unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/unauthorizedResponseData'
    badRequest:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/badRequestResponseData'
  schemas:
    notFoundResponseData:
      type: object
      properties:
        code:
          type: string
          enum:
            - NotFound
        message:
          type: string
      required:
        - code
        - message
    permissionDeniedResponseData:
      type: object
      properties:
        code:
          type: string
          enum:
            - PermissionDenied
        message:
          type: string
      required:
        - code
        - message
    unauthorizedResponseData:
      type: object
      properties:
        code:
          type: string
          enum:
            - Unauthorized
        message:
          type: string
      required:
        - code
        - message
    badRequestResponseData:
      type: object
      properties:
        code:
          type: string
          enum:
            - BadRequest
        message:
          type: string
      required:
        - code
        - message

    AddBookRequest:
      type: object
      properties:
        filePath:
          type: string
        title:
          type: string
        description:
          type: string
        authorIDs:
          type: array
          items:
            type: integer
        categoryIDs:
          type: array
          items:
            type: integer
        coverPath:
          type: string
      required:
        - filePath
        - title
        - authorIDs
        - categoryIDs
    AddBookResponseData:
      type: object
      properties:
        id:
          type: integer
      required:
        - id
    GetBookInfoResponseData:
      type: object
      properties:
        book:
          $ref: '#/components/schemas/bookInfo'
      required:
        - book
    GetAuthorInfoResponseData:
      type: object
      properties:
        author:
          $ref: '#/components/schemas/authorInfo'
      required:
        - author
    ListAuthorBooksResponseData:
      type: object
      properties:
        books:
          type: array
          items:
            $ref: '#/components/schemas/bookData'
      required:
        - books
    SearchBooksRequest:
      type: object
      properties:
        searchString:
          type: string
      required:
        - searchString
    SearchAuthorsRequest:
      type: object
      properties:
        searchString:
          type: string
      required:
        - searchString
    SearchArticlesRequest:
      type: object
      properties:
        searchString:
          type: string
      required:
        - searchString
    CheckBookInLibraryResponseData:
      type: object
      properties:
        contains:
          type: boolean
      required:
        - contains
    SearchBooksResponseData:
      type: object
      properties:
        books:
          type: array
          items:
            $ref: '#/components/schemas/bookData'
        totalCount:
          type: integer
      required:
        - books
        - totalCount
    SearchAuthorsResponseData:
      type: object
      properties:
        authors:
          type: array
          items:
            $ref: '#/components/schemas/authorInfo'
        totalCount:
          type: integer
      required:
        - authors
        - totalCount
    SearchArticlesResponseData:
      type: object
      properties:
        articles:
          type: array
          items:
            $ref: '#/components/schemas/articleData'
        totalCount:
          type: integer
      required:
        - articles
        - totalCount
    ListBooksByCategoryResponseData:
      type: object
      properties:
        books:
          type: array
          items:
            $ref: '#/components/schemas/bookData'
        totalCount:
          type: integer
      required:
        - books
        - totalCount
    ListLibraryBooksByStatusRequest:
      type: object
      properties:
        readingStatus:
          type: string
          enum:
            - inProgress
            - finished
            - planned
      required:
        - readingStatus
    ListLibraryBooksByStatusResponseData:
      type: object
      properties:
        books:
          type: array
          items:
            $ref: '#/components/schemas/bookInLibrary'
        totalNumber:
          type: integer
      required:
        - books
        - totalNumber
    ChangeReadingStatusRequest:
      type: object
      properties:
        readingStatus:
          type: string
          enum:
            - inProgress
            - finished
            - planned
      required:
        - readingStatus
    SaveBookFeedbackRequest:
      type: object
      properties:
        starCount:
          type: integer
        comment:
          type: string
      required:
        - starCount
    ListBookFeedbackResponseData:
      type: object
      properties:
        feedback:
          type: array
          items:
            $ref: '#/components/schemas/feedbackInfo'
      required:
        - feedback
    EditBookRequest:
      type: object
      properties:
        newTitle:
          type: string
        newDescription:
          type: string
        newCoverPath:
          type: string
    ListCategoriesResponseData:
      type: object
      properties:
        categories:
          type: array
          items:
            $ref: '#/components/schemas/categoryInfo'
      required:
        - categories
    CreateAuthorRequest:
      type: object
      properties:
        firstName:
          type: string
        lastName:
          type: string
        description:
          type: string
      required:
        - firstName
    CreateAuthorResponseData:
      type: object
      properties:
        id:
          type: integer
      required:
        - id
    EditAuthorRequest:
      type: object
      properties:
        newFirstName:
          type: string
        newLastName:
          type: string
        newDescription:
          type: string
    ListAuthorsResponseData:
      type: object
      properties:
        authors:
          type: array
          items:
            $ref: '#/components/schemas/authorInfo'
      required:
        - authors
    GetUserDataResponseData:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/userData'
      required:
        - data
    LoginUserRequest:
      type: object
      properties:
        login:
          type: string
        password:
          type: string
      required:
        - login
        - password
    LoginUserResponseData:
      type: object
      properties:
        token:
          type: string
      required:
        - token
    RegisterUserRequest:
      type: object
      properties:
        email:
          type: string
        password:
          type: string
        firstName:
          type: string
        lastName:
          type: string
      required:
        - email
        - password
        - firstName
    GetAuthorizedUserResponseData:
      type: object
      properties:
        user:
          $ref: '#/components/schemas/userInfo'
      required:
        - user
    ListUsersResponseData:
      type: object
      properties:
        users:
          type: array
          items:
            $ref: '#/components/schemas/userInfo'
      required:
        - users
    GetUserInfoResponseData:
      type: object
      properties:
        user:
          $ref: '#/components/schemas/userInfo'
      required:
        - user
    ChangeUserRoleRequest:
      type: object
      properties:
        role:
          type: string
          enum:
            - user
            - editor
      required:
        - role
    EditUserInfoRequest:
      type: object
      properties:
        firstName:
          type: string
        lastName:
          type: string
        avatarPath:
          type: string
    CreateArticleRequest:
      type: object
      properties:
        title:
          type: string
        content:
          type: string
      required:
        - title
        - content
    CreateArticleResponseData:
      type: object
      properties:
        id:
          type: integer
      required:
        - id
    EditArticleRequest:
      type: object
      properties:
        newTitle:
          type: string
        newContent:
          type: string
    GetArticleResponseData:
      type: object
      properties:
        article:
          $ref: '#/components/schemas/articleInfo'
      required:
        - article
    ListArticlesResponseData:
      type: object
      properties:
        articles:
          type: array
          items:
            $ref: '#/components/schemas/articleData'
        totalCount:
          type: integer
      required:
        - articles
        - totalCount
    ManagementArticlesResponseData:
      type: object
      properties:
        articles:
          type: array
          items:
            $ref: '#/components/schemas/articleData'
      required:
        - articles
    UploadFileResponseData:
      type: object
      properties:
        filePath:
          type: string
      required:
        - filePath
    GetFileResponseData:
      type: object
      properties:
        file:
          type: string
          format: binary
      required:
        - file

    bookData:
      type: object
      properties:
        id:
          type: integer
        title:
          type: string
        coverPath:
          type: string
        authors:
          type: array
          items:
            $ref: '#/components/schemas/authorInfo'
        starCount:
          type: number
      required:
        - id
        - title
        - coverPath
        - authors
        - starCount

    bookInLibrary:
      type: object
      properties:
        id:
          type: integer
        title:
          type: string
        coverPath:
          type: string
        authors:
          type: array
          items:
            $ref: '#/components/schemas/authorInfo'
        starCount:
          type: number
        readingStatus:
          type: string
          enum:
            - inProgress
            - finished
            - planned
      required:
        - id
        - title
        - authors
        - starCount
        - readingStatus

    bookInfo:
      type: object
      properties:
        id:
          type: integer
        title:
          type: string
        description:
          type: string
        coverPath:
          type: string
        authors:
          type: array
          items:
            $ref: '#/components/schemas/authorInfo'
        starCount:
          type: number
        categories:
          type: array
          items:
            $ref: '#/components/schemas/categoryInfo'
        filePath:
          type: string
      required:
        - id
        - title
        - coverPath
        - authors
        - starCount
        - categories
        - filePath

    authorInfo:
      type: object
      properties:
        id:
          type: integer
        firstName:
          type: string
        lastName:
          type: string
        description:
          type: string
        avatarPath:
          type: string
      required:
        - id
        - firstName

    categoryInfo:
      type: object
      properties:
        id:
          type: integer
        category:
          type: string
      required:
        - id
        - category

    feedbackInfo:
      type: object
      properties:
        user:
          $ref: '#/components/schemas/userData'
        starCount:
          type: integer
        comment:
          type: string
        postedAt:
          type: integer
          format: int64
          description: unix timestamp
      required:
        - user
        - starCount
        - postedAt

    userData:
      type: object
      properties:
        id:
          type: integer
        firstName:
          type: string
        lastName:
          type: string
        avatarPath:
          type: string
      required:
        - id
        - firstName

    userInfo:
      type: object
      properties:
        id:
          type: integer
        role:
          type: string
          enum:
            - user
            - admin
            - editor
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        avatarPath:
          type: string
      required:
        - id
        - firstName
        - email

    articleInfo:
      type: object
      properties:
        id:
          type: integer
        title:
          type: string
        content:
          type: string
        author:
          $ref: '#/components/schemas/userData'
        status:
          type: string
          enum:
            - published
            - unpublished
        publishDate:
          type: integer
          format: int64
          description: unix timestamp
      required:
        - id
        - title
        - content
        - author
        - status

    articleData:
      type: object
      properties:
        id:
          type: integer
        title:
          type: string
        author:
          $ref: '#/components/schemas/userData'
        status:
          type: string
          enum:
            - published
            - unpublished
        publishDate:
          type: integer
          format: int64
          description: unix timestamp
      required:
        - id
        - title
        - author
        - status